#!/bin/bash
#
# Backup Script for backing up mysql openmrs databases
# and complex_obs dir
# this script does not check if packages 7za is
# installed. Ensure that 7za is installed
#
echoWithDate() {
  CURRENT_DATE=$(date '+%Y-%m-%d-%H-%M-%S')
  echo "${CURRENT_DATE}: ${1}"
}

#############################################
# For Pleebo and other environments which can't locate this command
MYSQLDUMP_DIR=/opt/mysql/server-5.6/bin
export PATH=$PATH:${MYSQLDUMP_DIR}
#####################################

USER='<%= @backup_user %>'
PASS='<%= @backup_password %>'
DIR=<%= @tomcat_home_dir %>/backups
PREFIX=<%= @backup_file_prefix %>
MAIL_TO='<%= @sysadmin_email %>'

if [ -n "$1" ]
then
  MODIFIER=release_$1
else
  MODIFIER=`<%= @backup_time %>`
fi

FILENAME=${PREFIX}_backup_${MODIFIER}.sql.7z
CURRENT_FILENAME=${PREFIX}_current_backup.sql.7z
LOGDIR=${DIR}/logs
LOGFILE=${LOGDIR}/backup-log-${MODIFIER}.log
ERRORS_DURING_BACKUP=0

# create the needed directories
mkdir -p ${DIR}/current
mkdir -p ${DIR}/sequences
mkdir -p ${LOGDIR}

# set up logging to file
exec > ${LOGFILE} 2>&1

echoWithDate "Starting backup"

# Dump database, encrypt and compress
if [ $? -eq 0 ]; then
    echoWithDate "Executing mysqldump and compressing with 7zip"
    mysqldump -u${USER} -p${PASS} --opt --flush-logs --single-transaction openmrs 2>/dev/null | 7za a -p${PASS} -siy -t7z ${DIR}/sequences/${FILENAME} -mx9 2>&1 >/dev/null
fi

if [ $? -eq 0 ]; then
    echoWithDate "mysqldump and 7zip completed successfully"

    ### check if backed up db size is not empty
    if ! [ -s "${DIR}/sequences/${FILENAME}" ];
    then
        >&2 echoWithDate "error: mysqldump is empty\n"
        ERRORS_DURING_BACKUP=1
    else
        echoWithDate "Size for compressed DB: $(/usr/bin/du -hs ${DIR}/sequences/${FILENAME})"
        # link the current to the latest dump
        rm -f ${DIR}/current/${CURRENT_FILENAME}
        ln -s ${DIR}/sequences/${FILENAME} ${DIR}/current/${CURRENT_FILENAME}
    fi

else
    echoWithDate "error: an error occurred during mysqldump and 7zip backup"
    ERRORS_DURING_BACKUP=1
fi

#####################################
## backup complex obs directory
#####################################
COMPLEX_OBS_DIR='<%= @tomcat_home_dir %>/.OpenMRS/complex_obs'
COMPLEX_OBS_BACKUP_DIR="${DIR}/sequences/complex_obs"
COMPLEX_OBS_FILENAME=${PREFIX}_complex_obs_${MODIFIER}.7z

## check if file is not empty
if ! [ -s "${COMPLEX_OBS_DIR}" ];
then
        # note we exit here as a success since some sites don't have complex_obs dir
        echoWithDate "complex_obs dir is empty"
        echoWithDate "Size for compressed DB dir $(/usr/bin/du -hs ${DIR}/sequences/${FILENAME})"
        echoWithDate "Success, backups without compressing complex_obs ended at `date`"

else
        echoWithDate "complex_obs dir empty not empty, copying it to sequences dir"
        cp -r ${COMPLEX_OBS_DIR} ${DIR}/sequences

        echoWithDate "compressing complex_obs dir."
        ## should figure out how to do this incrementally
        ## /dev/null may affect the command after, figure out the best way for this
        cd ${DIR}/sequences
        7za a -p${PASS} -mx=9 -r "${PREFIX}_complex_obs_${MODIFIER}.7z" "complex_obs" 2>&1 >/dev/null

        # remove this dir so that it is created next time
        if [ $? -eq 0 ]; then
            rm -rf ${COMPLEX_OBS_BACKUP_DIR}
        else
            echoWithDate "Error compressing complex_obs dir"
            ERRORS_DURING_BACKUP=1
        fi
fi

##############################################
### backup with percona if configured to do so
### if backing up with native percona install, you must ensure the percona dependency is installed, this will not do so
### alternatively, you can back up with a dockerized percona install.  see below.
##############################################

PERCONA_BACKUP_ENABLED='<%= @openmrs_percona_backup_enabled %>'
PERCONA_INSTALL_MODE='<%= @openmrs_percona_install_mode %>'

if [ "$PERCONA_BACKUP_ENABLED" == "true" ]; then

    PERCONA_BACKUP_STATUS=1
    echoWithDate "Percona Backup configured.  Using percona install mode: $PERCONA_INSTALL_MODE"

    # The PERCONA_DATA_DIR is where the MySQL data directory is backed up and prepared
    PERCONA_DATA_DIR=${DIR}/percona_data_dir
    rm -rf ${PERCONA_DATA_DIR}/
    echoWithDate "Removed any existing directory at: ${PERCONA_DATA_DIR}"

    # The PERCONA_ARCHIVE_DIR is where the PERCONA_DATA_DIR is zipped and metadata files are created
    PERCONA_ARCHIVE_DIR=${DIR}/percona_archive_dir
    rm -rf ${PERCONA_ARCHIVE_DIR}/
    mkdir -p ${PERCONA_ARCHIVE_DIR}
    echoWithDate "Recreated: ${PERCONA_ARCHIVE_DIR}"

    # The PERCONA_BACKUP_DIR is where successfully completed backups are copied for upload
    PERCONA_BACKUP_DIR=${DIR}/percona
    mkdir -p ${PERCONA_BACKUP_DIR}
    echoWithDate "Ensured: ${PERCONA_BACKUP_DIR}"

    echoWithDate "Executing Percona Backup"
    if [ "$PERCONA_INSTALL_MODE" == "docker" ]; then
        docker run --name percona --rm \
          -v /var/lib/mysql:/var/lib/mysql -v /run/mysqld:/run/mysqld -v ${PERCONA_DATA_DIR}:/opt/backup \
          partnersinhealth/percona-0.1-4 \
          innobackupex --user=<%= @backup_user %> --password="<%= @backup_password %>" --no-timestamp /opt/backup
    else
        innobackupex --user=<%= @backup_user %> --password="<%= @backup_password %>" --no-timestamp ${PERCONA_DATA_DIR}
    fi

    if [ $? -eq 0 ]; then
        echoWithDate "Percona backup succeeded, now preparing"
        if [ "$PERCONA_INSTALL_MODE" == "docker" ]; then
            docker run --name percona --rm -v $PERCONA_DATA_DIR:/opt/backup partnersinhealth/percona-0.1-4 innobackupex --apply-log  /opt/backup
        else
            innobackupex --apply-log ${PERCONA_DATA_DIR}
        fi

        if [ $? -eq 0 ]; then
            PERCONA_BACKUP_STATUS=0
            echoWithDate "Percona prepare succeeded"
        else
            echoWithDate "Percona prepare failed"
        fi
    else
        echoWithDate "Percona backup failed"
    fi

    PERCONA_BACKUP_DATE=$(date '+%Y-%m-%d-%H-%M-%S')

    if [ $PERCONA_BACKUP_STATUS -eq 0 ]; then

        echoWithDate "Creating 7z archive of Percona backup"
        7za a ${PERCONA_ARCHIVE_DIR}/percona.7z -p${PASS} -y -w${PERCONA_DATA_DIR} ${PERCONA_DATA_DIR}/*

        if [ $? -eq 0 ]; then
            echoWithDate "Archive created successfully"
            echoWithDate "Creating checksum file"
            PERCONA_ARCHIVE_MD5=($(md5sum ${PERCONA_ARCHIVE_DIR}/percona.7z))
            echo $PERCONA_ARCHIVE_MD5 > ${PERCONA_ARCHIVE_DIR}/percona.7z.md5
            if [ $? -ne 0 ]; then
                PERCONA_BACKUP_STATUS=1
                echoWithDate "Creating checksum failed"
            fi
            echoWithDate "Creating date file"
            echo "$PERCONA_BACKUP_DATE" > ${PERCONA_ARCHIVE_DIR}/percona.7z.date
            if [ $? -ne 0 ]; then
                PERCONA_BACKUP_STATUS=1
                echoWithDate "Creating date file failed"
            fi
        else
            PERCONA_BACKUP_STATUS=1
            echoWithDate "Archive creation failed"
        fi

        if [ $PERCONA_BACKUP_STATUS -eq 0 ]; then
            echoWithDate "Backup and archive successful, replacing latest files for backup"
            rm -fR ${PERCONA_BACKUP_DIR}/*
            mv ${PERCONA_ARCHIVE_DIR}/* ${PERCONA_BACKUP_DIR}
            if [ $? -eq 0 ]; then
                echoWithDate "Backup moved successfully, removing directories"
                rm -rf ${PERCONA_DATA_DIR}/
                rm -rf ${PERCONA_ARCHIVE_DIR}/
            else
                PERCONA_BACKUP_STATUS=1
                echoWithDate "Backup move failed"
            fi
        fi
    fi

    if [ $PERCONA_BACKUP_STATUS -ne 0 ]; then
        ERRORS_DURING_BACKUP=1
    fi
else
    echoWithDate "Percona Backup not configured"
fi

if [ $ERRORS_DURING_BACKUP -eq 0 ]; then
    echoWithDate "Success, backups ended at `date`"
    if [ ! -z "$MAIL_TO" ]; then
        mail -s "${PREFIX}: backup is successful" "${MAIL_TO}" < ${LOGFILE}
    fi
else
    if [ ! -z "$MAIL_TO" ]; then
        mail -s "${PREFIX}: Error during backup" "${MAIL_TO}" < ${LOGFILE}
    fi
fi
