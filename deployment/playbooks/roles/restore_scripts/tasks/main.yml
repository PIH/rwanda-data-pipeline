- name: Base setup
  include_role: name=base_setup public=true

# Commenting out the install Docker step for now due to the fact that Docker is already on the current warehouse test, installed differently
#- name: Install Docker
#  include_role: name=docker

- name: Add directory for each DB to restore
  file: path={{ rdp_restore_db_dir }}/{{ item.restoreId }} state=directory owner={{ rdp_user }} group={{ rdp_user_group }}
  with_items:
    - "{{ rdp_restore_dbs }}"

- name: Add restoration scripts for each MySQL Xtrabackup
  template: src=xtrabackup.env dest={{ rdp_env_dir }}/{{ item.restoreId }}-restore.env.example mode=preserve
  with_items:
    - "{{ rdp_restore_dbs }}"
  when: item.backupType == "xtrabackup"

- name: Add restoration scripts for each Postgres dump
  template: src=pgdump.env dest={{ rdp_env_dir }}/{{ item.restoreId }}-restore.env.example mode=preserve
  with_items:
    - "{{ rdp_restore_dbs }}"
  when: item.backupType == "pgdump"

- name: Add cron script
  template: src=restore.sh dest={{ rdp_bin_dir }}/restore.sh owner={{ rdp_user }} group={{ rdp_user_group }} mode=0755

- name: Add appropriate lines to restore.sh
  lineinfile: dest={{ rdp_bin_dir }}/restore.sh line='(echo "Restoring {{ item.restoreId }}"; source {{ rdp_env_dir }}/{{ item.restoreId }}-restore.env; /bin/bash {{ rdp_scripts_dir }}/restore-{{ item.backupType }}.sh)'
  with_items:
    - "{{ rdp_restore_dbs }}"

- name: Setup cron
  cron: name="Restore DBs" minute="{{ rdp_restore_cron_minute }}" hour="{{ rdp_restore_cron_hour }}" weekday="{{ rdp_restore_cron_weekday }}" user="{{ rdp_restore_cron_user }}" job="exec >> {{ rdp_log_file }} 2>&1 && {{ rdp_bin_dir }}/restore.sh"
